#include <stdio.h>
#include <time.h>
#define MAX 50

// Memoization array for recursive Fibonacci
int memo[MAX] = {0};

// Recursive function to compute the n-th Fibonacci number with memoization
int FibonacciRecursive(int number) {
    if (number == 0) return 0;
    if (number == 1) return 1;
    if (memo[number] != 0) return memo[number];
    memo[number] = FibonacciRecursive(number - 1) + FibonacciRecursive(number - 2);
    return memo[number];
}

// Iterative function to compute the n-th Fibonacci number
int FibonacciIterative(int number) {
    if (number == 0) return 0;
    if (number == 1) return 1;
    int a = 0, b = 1, temp;
    for (int i = 2; i <= number; i++) {
        temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}

// Function to ensure the input number is >= 0 and within limit
int check_number(int number) {
    while (number < 0 || number >= MAX) {
        printf("The number must be between 0 and %d: ", MAX - 1);
        scanf("%d", &number);
    }
    return number;
}

// Function to display Fibonacci sequence with visual bars and formula
void display_sequence(int number, int use_recursive) {
    printf("Fibonacci sequence up to term %d (%s):\n", number, use_recursive ? "Recursive" : "Iterative");
    int a = 0, b = 1, temp;
    for (int i = 0; i <= number; i++) {
        int value;
        if (use_recursive) {
            value = FibonacciRecursive(i);
        } else {
            if (i == 0) {
                value = 0;
                a = 0; b = 1;
            } else if (i == 1) {
                value = 1;
            } else {
                value = a + b;
                a = b;
                b = value;
            }
        }

        if (i >= 2) {
            int f1 = use_recursive ? FibonacciRecursive(i - 1) : (i == 2 ? 1 : b - a);
            int f2 = use_recursive ? FibonacciRecursive(i - 2) : a;
            printf("F(%d) = F(%d) + F(%d) = %d + %d = %d ", i, i - 1, i - 2, f1, f2, value);
        } else {
            printf("F(%d) = %d ", i, value);
        }

        for (int j = 0; j < value / 10 + 1; j++) printf("*");
        printf("\n");
    }
}

// Function to ask user for a number and compute Fibonacci sequence
void give_number() {
    int number, choice;
    char repeat;

    do {
        printf("Give a number between 0 and %d: ", MAX - 1);
        scanf("%d", &number);
        number = check_number(number);

        printf("Choose method:\n");
        printf("1 - Recursive (Slower, but shows how recursion works)\n");
        printf("2 - Iterative (Faster and more efficient for large numbers)\n");
        printf("Your choice: ");
        scanf("%d", &choice);

        while (choice != 1 && choice != 2) {
            printf("Invalid choice. Please enter 1 (Recursive) or 2 (Iterative): ");
            scanf("%d", &choice);
        }

        // Timing execution
        clock_t start = clock();
        display_sequence(number, choice == 1);
        clock_t end = clock();
        double time_spent = (double)(end - start) / CLOCKS_PER_SEC;
        printf("Execution time: %.6f seconds\n", time_spent);

        printf("Do you want to try another number? (y/n): ");
        scanf(" %c", &repeat);

        // Reset memo array for next run
        for (int i = 0; i < MAX; i++) memo[i] = 0;

    } while (repeat == 'y' || repeat == 'Y');
}

int main() {
    give_number();
    return 0;
}
