#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define MAX_WORD_LENGTH 100
#define FILE_NAME "words.txt"

// Function to trim newline from input
void trim_newline(char* str) {
    size_t len = strlen(str);
    if (len > 0 && str[len - 1] == '\n') {
        str[len - 1] = '\0';
    }
}

// Function to compare two words (used for sorting)
int compare_words(const void* a, const void* b) {
    return strcmp(*(const char**)a, *(const char**)b);
}

// Function to save words to a file
void save_to_file(char** words, int count) {
    FILE* file = fopen(FILE_NAME, "w");
    if (!file) {
        printf("\033[1;31mError saving to file!\033[0m\n");
        return;
    }
    for (int i = 0; i < count; i++) {
        fprintf(file, "%s\n", words[i]);
    }
    fclose(file);
    printf("\033[1;32m✅ List saved to '%s'.\033[0m\n", FILE_NAME);
}

// Function to load words from a file
int load_from_file(char*** words) {
    FILE* file = fopen(FILE_NAME, "r");
    if (!file) return 0; // No file found, return empty list

    char buffer[MAX_WORD_LENGTH];
    int count = 0;
    while (fgets(buffer, MAX_WORD_LENGTH, file)) {
        trim_newline(buffer);

        char* new_word = malloc(strlen(buffer) + 1);
        if (!new_word) break;
        strcpy(new_word, buffer);

        char** temp = realloc(*words, (count + 1) * sizeof(char*));
        if (!temp) {
            free(new_word);
            break;
        }
        *words = temp;
        (*words)[count++] = new_word;
    }
    fclose(file);
    return count;
}

// Function to delete a word from the list
void delete_word(char*** words, int* count) {
    if (*count == 0) {
        printf("\033[1;31m⚠️ No words to delete!\033[0m\n");
        return;
    }

    printf("👉 Enter word to delete: ");
    char buffer[MAX_WORD_LENGTH];
    fgets(buffer, MAX_WORD_LENGTH, stdin);
    trim_newline(buffer);

    int index = -1;
    for (int i = 0; i < *count; i++) {
        if (strcmp((*words)[i], buffer) == 0) {
            index = i;
            break;
        }
    }

    if (index == -1) {
        printf("\033[1;31m⚠️ Word not found!\033[0m\n");
        return;
    }

    free((*words)[index]); // Free memory of deleted word
    for (int i = index; i < *count - 1; i++) {
        (*words)[i] = (*words)[i + 1]; // Shift words left
    }

    char** temp = realloc(*words, (*count - 1) * sizeof(char*));
    if (temp || *count - 1 == 0) {
        *words = temp;
    }
    (*count)--;

    printf("\033[1;32m✅ Word deleted.\033[0m\n");
}

int main() {
    char** word_list = NULL;
    int word_count = load_from_file(&word_list);
    char buffer[MAX_WORD_LENGTH];
    bool running = true;

    printf("\n📖 Welcome to the Enhanced Word List! 📖\n");
    printf("Type words to add them to the list. Type 'MENU' for options.\n\n");

    while (running) {
        printf("👉 Enter a word: ");
        if (!fgets(buffer, MAX_WORD_LENGTH, stdin)) {
            printf("\033[1;31mError reading input!\033[0m\n");
            break;
        }

        trim_newline(buffer);

        if (strcmp(buffer, "EXIT") == 0) {
            running = false;
            break;
        } else if (strcmp(buffer, "MENU") == 0) {
            printf("\n📌 MENU:\n");
            printf("  - Type a word to add it.\n");
            printf("  - Type 'DELETE' to remove a word.\n");
            printf("  - Type 'SAVE' to save words to file.\n");
            printf("  - Type 'SHOW' to display sorted words.\n");
            printf("  - Type 'EXIT' to quit.\n\n");
            continue;
        } else if (strcmp(buffer, "DELETE") == 0) {
            delete_word(&word_list, &word_count);
            continue;
        } else if (strcmp(buffer, "SAVE") == 0) {
            save_to_file(word_list, word_count);
            continue;
        } else if (strcmp(buffer, "SHOW") == 0) {
            qsort(word_list, word_count, sizeof(char*), compare_words);
            printf("\n📜 Word List (%d words):\n", word_count);
            for (int i = 0; i < word_count; i++) {
                printf("  - %s\n", word_list[i]);
            }
            printf("\n");
            continue;
        }

        // Add word dynamically
        char* new_word = malloc(strlen(buffer) + 1);
        if (!new_word) {
            printf("\033[1;31mMemory allocation failed!\033[0m\n");
            break;
        }
        strcpy(new_word, buffer);

        char** temp = realloc(word_list, (word_count + 1) * sizeof(char*));
        if (!temp) {
            free(new_word);
            printf("\033[1;31mMemory allocation failed!\033[0m\n");
            break;
        }

        word_list = temp;
        word_list[word_count++] = new_word;

        printf("\033[1;32m✅ Added: %s\033[0m\n", new_word);
    }

    // Free all allocated memory
    for (int i = 0; i < word_count; i++) {
        free(word_list[i]);
    }
    free(word_list);

    printf("\n🚀 Program exited gracefully. Goodbye!\n");
    return 0;
}
