using System;
using System.Diagnostics;

class FibonacciProgram
{
    const int MAX = 50;
    static int[] memo = new int[MAX];

    // Recursive function with memoization
    static int FibonacciRecursive(int number)
    {
        if (number == 0) return 0;
        if (number == 1) return 1;
        if (memo[number] != 0) return memo[number];
        memo[number] = FibonacciRecursive(number - 1) + FibonacciRecursive(number - 2);
        return memo[number];
    }

    // Iterative Fibonacci
    static int FibonacciIterative(int number)
    {
        if (number == 0) return 0;
        if (number == 1) return 1;
        int a = 0, b = 1, temp = 0;
        for (int i = 2; i <= number; i++)
        {
            temp = a + b;
            a = b;
            b = temp;
        }
        return b;
    }

    // Display the Fibonacci sequence with formula breakdown
    static void DisplaySequence(int number, bool useRecursive)
    {
        Console.WriteLine($"Fibonacci sequence up to term {number} ({(useRecursive ? "Recursive" : "Iterative")}):");
        int a = 0, b = 1;

        for (int i = 0; i <= number; i++)
        {
            int value;
            if (useRecursive)
            {
                value = FibonacciRecursive(i);
            }
            else
            {
                if (i == 0) { value = 0; a = 0; b = 1; }
                else if (i == 1) { value = 1; }
                else
                {
                    value = a + b;
                    a = b;
                    b = value;
                }
            }

            if (i >= 2)
            {
                int f1 = useRecursive ? FibonacciRecursive(i - 1) : (i == 2 ? 1 : b - a);
                int f2 = useRecursive ? FibonacciRecursive(i - 2) : a;
                Console.Write($"F({i}) = F({i - 1}) + F({i - 2}) = {f1} + {f2} = {value} ");
            }
            else
            {
                Console.Write($"F({i}) = {value} ");
            }

            for (int j = 0; j < value / 10 + 1; j++)
                Console.Write("*");

            Console.WriteLine();
        }
    }

    // Check if input number is valid
    static int CheckNumber(int number)
    {
        while (number < 0 || number >= MAX)
        {
            Console.Write($"The number must be between 0 and {MAX - 1}: ");
            string input = Console.ReadLine();
            if (!int.TryParse(input, out number))
            {
                Console.WriteLine("Invalid input, please enter a valid number.");
            }
        }
        return number;
    }

    static void Main()
    {
        char repeat;
        do
        {
            int number;
            Console.Write($"Give a number between 0 and {MAX - 1}: ");
            string input = Console.ReadLine();
            while (!int.TryParse(input, out number))
            {
                Console.WriteLine("Invalid input. Please enter a valid number.");
                input = Console.ReadLine();
            }
            number = CheckNumber(number);

            Console.WriteLine("Choose method:");
            Console.WriteLine("1 - Recursive (Slower, but shows how recursion works)");
            Console.WriteLine("2 - Iterative (Faster and more efficient for large numbers)");
            Console.Write("Your choice: ");
            int choice;
            while (!int.TryParse(Console.ReadLine(), out choice) || (choice != 1 && choice != 2))
            {
                Console.Write("Invalid choice. Please enter 1 or 2: ");
            }

            Stopwatch sw = Stopwatch.StartNew();
            DisplaySequence(number, choice == 1);
            sw.Stop();

            Console.WriteLine($"Execution time: {sw.Elapsed.TotalSeconds:F6} seconds");

            Console.Write("Do you want to try another number? (y/n): ");
            repeat = Console.ReadKey().KeyChar;
            Console.WriteLine();

            // Reset memo
            Array.Clear(memo, 0, memo.Length);

        } while (repeat == 'y' || repeat == 'Y');
    }
}
